/**
 * Generated by the protoc-gen-ts.  DO NOT EDIT!
 * compiler version: 3.19.1
 * source: users.proto
 * git: https://github.com/thesayyn/protoc-gen-ts */
import * as dependency_1 from "./google/protobuf/timestamp";
import * as pb_1 from "google-protobuf";
import * as grpc_1 from "@grpc/grpc-js";
export enum Role {
    USER = 0
}
export class User extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        firstName?: string;
        lastName?: string;
        title?: string;
        email?: string;
        phone?: string;
        role?: Role;
        profilePicture?: string;
        password?: string;
        dateOfBirth?: string;
        address?: string;
        nationality?: string;
        username?: string;
        gender?: string;
        knownIps?: string[];
        flaggedIp?: string;
        createdAt?: dependency_1.google.protobuf.Timestamp;
        updatedAt?: dependency_1.google.protobuf.Timestamp;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [14], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("firstName" in data && data.firstName != undefined) {
                this.firstName = data.firstName;
            }
            if ("lastName" in data && data.lastName != undefined) {
                this.lastName = data.lastName;
            }
            if ("title" in data && data.title != undefined) {
                this.title = data.title;
            }
            if ("email" in data && data.email != undefined) {
                this.email = data.email;
            }
            if ("phone" in data && data.phone != undefined) {
                this.phone = data.phone;
            }
            if ("role" in data && data.role != undefined) {
                this.role = data.role;
            }
            if ("profilePicture" in data && data.profilePicture != undefined) {
                this.profilePicture = data.profilePicture;
            }
            if ("password" in data && data.password != undefined) {
                this.password = data.password;
            }
            if ("dateOfBirth" in data && data.dateOfBirth != undefined) {
                this.dateOfBirth = data.dateOfBirth;
            }
            if ("address" in data && data.address != undefined) {
                this.address = data.address;
            }
            if ("nationality" in data && data.nationality != undefined) {
                this.nationality = data.nationality;
            }
            if ("username" in data && data.username != undefined) {
                this.username = data.username;
            }
            if ("gender" in data && data.gender != undefined) {
                this.gender = data.gender;
            }
            if ("knownIps" in data && data.knownIps != undefined) {
                this.knownIps = data.knownIps;
            }
            if ("flaggedIp" in data && data.flaggedIp != undefined) {
                this.flaggedIp = data.flaggedIp;
            }
            if ("createdAt" in data && data.createdAt != undefined) {
                this.createdAt = data.createdAt;
            }
            if ("updatedAt" in data && data.updatedAt != undefined) {
                this.updatedAt = data.updatedAt;
            }
        }
    }
    get firstName() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set firstName(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get lastName() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set lastName(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get title() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set title(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get email() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set email(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get phone() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set phone(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get role() {
        return pb_1.Message.getFieldWithDefault(this, 6, Role.USER) as Role;
    }
    set role(value: Role) {
        pb_1.Message.setField(this, 6, value);
    }
    get profilePicture() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set profilePicture(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get password() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set password(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get dateOfBirth() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set dateOfBirth(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    get address() {
        return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
    }
    set address(value: string) {
        pb_1.Message.setField(this, 10, value);
    }
    get nationality() {
        return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
    }
    set nationality(value: string) {
        pb_1.Message.setField(this, 11, value);
    }
    get username() {
        return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
    }
    set username(value: string) {
        pb_1.Message.setField(this, 12, value);
    }
    get gender() {
        return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
    }
    set gender(value: string) {
        pb_1.Message.setField(this, 13, value);
    }
    get knownIps() {
        return pb_1.Message.getFieldWithDefault(this, 14, []) as string[];
    }
    set knownIps(value: string[]) {
        pb_1.Message.setField(this, 14, value);
    }
    get flaggedIp() {
        return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
    }
    set flaggedIp(value: string) {
        pb_1.Message.setField(this, 15, value);
    }
    get createdAt() {
        return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 16) as dependency_1.google.protobuf.Timestamp;
    }
    set createdAt(value: dependency_1.google.protobuf.Timestamp) {
        pb_1.Message.setWrapperField(this, 16, value);
    }
    get has_createdAt() {
        return pb_1.Message.getField(this, 16) != null;
    }
    get updatedAt() {
        return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 17) as dependency_1.google.protobuf.Timestamp;
    }
    set updatedAt(value: dependency_1.google.protobuf.Timestamp) {
        pb_1.Message.setWrapperField(this, 17, value);
    }
    get has_updatedAt() {
        return pb_1.Message.getField(this, 17) != null;
    }
    static fromObject(data: {
        firstName?: string;
        lastName?: string;
        title?: string;
        email?: string;
        phone?: string;
        role?: Role;
        profilePicture?: string;
        password?: string;
        dateOfBirth?: string;
        address?: string;
        nationality?: string;
        username?: string;
        gender?: string;
        knownIps?: string[];
        flaggedIp?: string;
        createdAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        updatedAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
    }): User {
        const message = new User({});
        if (data.firstName != null) {
            message.firstName = data.firstName;
        }
        if (data.lastName != null) {
            message.lastName = data.lastName;
        }
        if (data.title != null) {
            message.title = data.title;
        }
        if (data.email != null) {
            message.email = data.email;
        }
        if (data.phone != null) {
            message.phone = data.phone;
        }
        if (data.role != null) {
            message.role = data.role;
        }
        if (data.profilePicture != null) {
            message.profilePicture = data.profilePicture;
        }
        if (data.password != null) {
            message.password = data.password;
        }
        if (data.dateOfBirth != null) {
            message.dateOfBirth = data.dateOfBirth;
        }
        if (data.address != null) {
            message.address = data.address;
        }
        if (data.nationality != null) {
            message.nationality = data.nationality;
        }
        if (data.username != null) {
            message.username = data.username;
        }
        if (data.gender != null) {
            message.gender = data.gender;
        }
        if (data.knownIps != null) {
            message.knownIps = data.knownIps;
        }
        if (data.flaggedIp != null) {
            message.flaggedIp = data.flaggedIp;
        }
        if (data.createdAt != null) {
            message.createdAt = dependency_1.google.protobuf.Timestamp.fromObject(data.createdAt);
        }
        if (data.updatedAt != null) {
            message.updatedAt = dependency_1.google.protobuf.Timestamp.fromObject(data.updatedAt);
        }
        return message;
    }
    toObject() {
        const data: {
            firstName?: string;
            lastName?: string;
            title?: string;
            email?: string;
            phone?: string;
            role?: Role;
            profilePicture?: string;
            password?: string;
            dateOfBirth?: string;
            address?: string;
            nationality?: string;
            username?: string;
            gender?: string;
            knownIps?: string[];
            flaggedIp?: string;
            createdAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            updatedAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        } = {};
        if (this.firstName != null) {
            data.firstName = this.firstName;
        }
        if (this.lastName != null) {
            data.lastName = this.lastName;
        }
        if (this.title != null) {
            data.title = this.title;
        }
        if (this.email != null) {
            data.email = this.email;
        }
        if (this.phone != null) {
            data.phone = this.phone;
        }
        if (this.role != null) {
            data.role = this.role;
        }
        if (this.profilePicture != null) {
            data.profilePicture = this.profilePicture;
        }
        if (this.password != null) {
            data.password = this.password;
        }
        if (this.dateOfBirth != null) {
            data.dateOfBirth = this.dateOfBirth;
        }
        if (this.address != null) {
            data.address = this.address;
        }
        if (this.nationality != null) {
            data.nationality = this.nationality;
        }
        if (this.username != null) {
            data.username = this.username;
        }
        if (this.gender != null) {
            data.gender = this.gender;
        }
        if (this.knownIps != null) {
            data.knownIps = this.knownIps;
        }
        if (this.flaggedIp != null) {
            data.flaggedIp = this.flaggedIp;
        }
        if (this.createdAt != null) {
            data.createdAt = this.createdAt.toObject();
        }
        if (this.updatedAt != null) {
            data.updatedAt = this.updatedAt.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.firstName.length)
            writer.writeString(1, this.firstName);
        if (this.lastName.length)
            writer.writeString(2, this.lastName);
        if (this.title.length)
            writer.writeString(3, this.title);
        if (this.email.length)
            writer.writeString(4, this.email);
        if (this.phone.length)
            writer.writeString(5, this.phone);
        if (this.role != Role.USER)
            writer.writeEnum(6, this.role);
        if (this.profilePicture.length)
            writer.writeString(7, this.profilePicture);
        if (this.password.length)
            writer.writeString(8, this.password);
        if (this.dateOfBirth.length)
            writer.writeString(9, this.dateOfBirth);
        if (this.address.length)
            writer.writeString(10, this.address);
        if (this.nationality.length)
            writer.writeString(11, this.nationality);
        if (this.username.length)
            writer.writeString(12, this.username);
        if (this.gender.length)
            writer.writeString(13, this.gender);
        if (this.knownIps.length)
            writer.writeRepeatedString(14, this.knownIps);
        if (this.flaggedIp.length)
            writer.writeString(15, this.flaggedIp);
        if (this.has_createdAt)
            writer.writeMessage(16, this.createdAt, () => this.createdAt.serialize(writer));
        if (this.has_updatedAt)
            writer.writeMessage(17, this.updatedAt, () => this.updatedAt.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): User {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new User();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.firstName = reader.readString();
                    break;
                case 2:
                    message.lastName = reader.readString();
                    break;
                case 3:
                    message.title = reader.readString();
                    break;
                case 4:
                    message.email = reader.readString();
                    break;
                case 5:
                    message.phone = reader.readString();
                    break;
                case 6:
                    message.role = reader.readEnum();
                    break;
                case 7:
                    message.profilePicture = reader.readString();
                    break;
                case 8:
                    message.password = reader.readString();
                    break;
                case 9:
                    message.dateOfBirth = reader.readString();
                    break;
                case 10:
                    message.address = reader.readString();
                    break;
                case 11:
                    message.nationality = reader.readString();
                    break;
                case 12:
                    message.username = reader.readString();
                    break;
                case 13:
                    message.gender = reader.readString();
                    break;
                case 14:
                    pb_1.Message.addToRepeatedField(message, 14, reader.readString());
                    break;
                case 15:
                    message.flaggedIp = reader.readString();
                    break;
                case 16:
                    reader.readMessage(message.createdAt, () => message.createdAt = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                    break;
                case 17:
                    reader.readMessage(message.updatedAt, () => message.updatedAt = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): User {
        return User.deserialize(bytes);
    }
}
export class UserRegistrationRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        firstName?: string;
        lastName?: string;
        title?: string;
        email?: string;
        phone?: string;
        role?: Role;
        profilePicture?: string;
        password?: string;
        dateOfBirth?: string;
        address?: string;
        nationality?: string;
        username?: string;
        gender?: string;
        knownIps?: string[];
        flaggedIp?: string;
        createdAt?: dependency_1.google.protobuf.Timestamp;
        updatedAt?: dependency_1.google.protobuf.Timestamp;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [14], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("firstName" in data && data.firstName != undefined) {
                this.firstName = data.firstName;
            }
            if ("lastName" in data && data.lastName != undefined) {
                this.lastName = data.lastName;
            }
            if ("title" in data && data.title != undefined) {
                this.title = data.title;
            }
            if ("email" in data && data.email != undefined) {
                this.email = data.email;
            }
            if ("phone" in data && data.phone != undefined) {
                this.phone = data.phone;
            }
            if ("role" in data && data.role != undefined) {
                this.role = data.role;
            }
            if ("profilePicture" in data && data.profilePicture != undefined) {
                this.profilePicture = data.profilePicture;
            }
            if ("password" in data && data.password != undefined) {
                this.password = data.password;
            }
            if ("dateOfBirth" in data && data.dateOfBirth != undefined) {
                this.dateOfBirth = data.dateOfBirth;
            }
            if ("address" in data && data.address != undefined) {
                this.address = data.address;
            }
            if ("nationality" in data && data.nationality != undefined) {
                this.nationality = data.nationality;
            }
            if ("username" in data && data.username != undefined) {
                this.username = data.username;
            }
            if ("gender" in data && data.gender != undefined) {
                this.gender = data.gender;
            }
            if ("knownIps" in data && data.knownIps != undefined) {
                this.knownIps = data.knownIps;
            }
            if ("flaggedIp" in data && data.flaggedIp != undefined) {
                this.flaggedIp = data.flaggedIp;
            }
            if ("createdAt" in data && data.createdAt != undefined) {
                this.createdAt = data.createdAt;
            }
            if ("updatedAt" in data && data.updatedAt != undefined) {
                this.updatedAt = data.updatedAt;
            }
        }
    }
    get firstName() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set firstName(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get lastName() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set lastName(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get title() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set title(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    get email() {
        return pb_1.Message.getFieldWithDefault(this, 4, "") as string;
    }
    set email(value: string) {
        pb_1.Message.setField(this, 4, value);
    }
    get phone() {
        return pb_1.Message.getFieldWithDefault(this, 5, "") as string;
    }
    set phone(value: string) {
        pb_1.Message.setField(this, 5, value);
    }
    get role() {
        return pb_1.Message.getFieldWithDefault(this, 6, Role.USER) as Role;
    }
    set role(value: Role) {
        pb_1.Message.setField(this, 6, value);
    }
    get profilePicture() {
        return pb_1.Message.getFieldWithDefault(this, 7, "") as string;
    }
    set profilePicture(value: string) {
        pb_1.Message.setField(this, 7, value);
    }
    get password() {
        return pb_1.Message.getFieldWithDefault(this, 8, "") as string;
    }
    set password(value: string) {
        pb_1.Message.setField(this, 8, value);
    }
    get dateOfBirth() {
        return pb_1.Message.getFieldWithDefault(this, 9, "") as string;
    }
    set dateOfBirth(value: string) {
        pb_1.Message.setField(this, 9, value);
    }
    get address() {
        return pb_1.Message.getFieldWithDefault(this, 10, "") as string;
    }
    set address(value: string) {
        pb_1.Message.setField(this, 10, value);
    }
    get nationality() {
        return pb_1.Message.getFieldWithDefault(this, 11, "") as string;
    }
    set nationality(value: string) {
        pb_1.Message.setField(this, 11, value);
    }
    get username() {
        return pb_1.Message.getFieldWithDefault(this, 12, "") as string;
    }
    set username(value: string) {
        pb_1.Message.setField(this, 12, value);
    }
    get gender() {
        return pb_1.Message.getFieldWithDefault(this, 13, "") as string;
    }
    set gender(value: string) {
        pb_1.Message.setField(this, 13, value);
    }
    get knownIps() {
        return pb_1.Message.getFieldWithDefault(this, 14, []) as string[];
    }
    set knownIps(value: string[]) {
        pb_1.Message.setField(this, 14, value);
    }
    get flaggedIp() {
        return pb_1.Message.getFieldWithDefault(this, 15, "") as string;
    }
    set flaggedIp(value: string) {
        pb_1.Message.setField(this, 15, value);
    }
    get createdAt() {
        return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 16) as dependency_1.google.protobuf.Timestamp;
    }
    set createdAt(value: dependency_1.google.protobuf.Timestamp) {
        pb_1.Message.setWrapperField(this, 16, value);
    }
    get has_createdAt() {
        return pb_1.Message.getField(this, 16) != null;
    }
    get updatedAt() {
        return pb_1.Message.getWrapperField(this, dependency_1.google.protobuf.Timestamp, 17) as dependency_1.google.protobuf.Timestamp;
    }
    set updatedAt(value: dependency_1.google.protobuf.Timestamp) {
        pb_1.Message.setWrapperField(this, 17, value);
    }
    get has_updatedAt() {
        return pb_1.Message.getField(this, 17) != null;
    }
    static fromObject(data: {
        firstName?: string;
        lastName?: string;
        title?: string;
        email?: string;
        phone?: string;
        role?: Role;
        profilePicture?: string;
        password?: string;
        dateOfBirth?: string;
        address?: string;
        nationality?: string;
        username?: string;
        gender?: string;
        knownIps?: string[];
        flaggedIp?: string;
        createdAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        updatedAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
    }): UserRegistrationRequest {
        const message = new UserRegistrationRequest({});
        if (data.firstName != null) {
            message.firstName = data.firstName;
        }
        if (data.lastName != null) {
            message.lastName = data.lastName;
        }
        if (data.title != null) {
            message.title = data.title;
        }
        if (data.email != null) {
            message.email = data.email;
        }
        if (data.phone != null) {
            message.phone = data.phone;
        }
        if (data.role != null) {
            message.role = data.role;
        }
        if (data.profilePicture != null) {
            message.profilePicture = data.profilePicture;
        }
        if (data.password != null) {
            message.password = data.password;
        }
        if (data.dateOfBirth != null) {
            message.dateOfBirth = data.dateOfBirth;
        }
        if (data.address != null) {
            message.address = data.address;
        }
        if (data.nationality != null) {
            message.nationality = data.nationality;
        }
        if (data.username != null) {
            message.username = data.username;
        }
        if (data.gender != null) {
            message.gender = data.gender;
        }
        if (data.knownIps != null) {
            message.knownIps = data.knownIps;
        }
        if (data.flaggedIp != null) {
            message.flaggedIp = data.flaggedIp;
        }
        if (data.createdAt != null) {
            message.createdAt = dependency_1.google.protobuf.Timestamp.fromObject(data.createdAt);
        }
        if (data.updatedAt != null) {
            message.updatedAt = dependency_1.google.protobuf.Timestamp.fromObject(data.updatedAt);
        }
        return message;
    }
    toObject() {
        const data: {
            firstName?: string;
            lastName?: string;
            title?: string;
            email?: string;
            phone?: string;
            role?: Role;
            profilePicture?: string;
            password?: string;
            dateOfBirth?: string;
            address?: string;
            nationality?: string;
            username?: string;
            gender?: string;
            knownIps?: string[];
            flaggedIp?: string;
            createdAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
            updatedAt?: ReturnType<typeof dependency_1.google.protobuf.Timestamp.prototype.toObject>;
        } = {};
        if (this.firstName != null) {
            data.firstName = this.firstName;
        }
        if (this.lastName != null) {
            data.lastName = this.lastName;
        }
        if (this.title != null) {
            data.title = this.title;
        }
        if (this.email != null) {
            data.email = this.email;
        }
        if (this.phone != null) {
            data.phone = this.phone;
        }
        if (this.role != null) {
            data.role = this.role;
        }
        if (this.profilePicture != null) {
            data.profilePicture = this.profilePicture;
        }
        if (this.password != null) {
            data.password = this.password;
        }
        if (this.dateOfBirth != null) {
            data.dateOfBirth = this.dateOfBirth;
        }
        if (this.address != null) {
            data.address = this.address;
        }
        if (this.nationality != null) {
            data.nationality = this.nationality;
        }
        if (this.username != null) {
            data.username = this.username;
        }
        if (this.gender != null) {
            data.gender = this.gender;
        }
        if (this.knownIps != null) {
            data.knownIps = this.knownIps;
        }
        if (this.flaggedIp != null) {
            data.flaggedIp = this.flaggedIp;
        }
        if (this.createdAt != null) {
            data.createdAt = this.createdAt.toObject();
        }
        if (this.updatedAt != null) {
            data.updatedAt = this.updatedAt.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.firstName.length)
            writer.writeString(1, this.firstName);
        if (this.lastName.length)
            writer.writeString(2, this.lastName);
        if (this.title.length)
            writer.writeString(3, this.title);
        if (this.email.length)
            writer.writeString(4, this.email);
        if (this.phone.length)
            writer.writeString(5, this.phone);
        if (this.role != Role.USER)
            writer.writeEnum(6, this.role);
        if (this.profilePicture.length)
            writer.writeString(7, this.profilePicture);
        if (this.password.length)
            writer.writeString(8, this.password);
        if (this.dateOfBirth.length)
            writer.writeString(9, this.dateOfBirth);
        if (this.address.length)
            writer.writeString(10, this.address);
        if (this.nationality.length)
            writer.writeString(11, this.nationality);
        if (this.username.length)
            writer.writeString(12, this.username);
        if (this.gender.length)
            writer.writeString(13, this.gender);
        if (this.knownIps.length)
            writer.writeRepeatedString(14, this.knownIps);
        if (this.flaggedIp.length)
            writer.writeString(15, this.flaggedIp);
        if (this.has_createdAt)
            writer.writeMessage(16, this.createdAt, () => this.createdAt.serialize(writer));
        if (this.has_updatedAt)
            writer.writeMessage(17, this.updatedAt, () => this.updatedAt.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserRegistrationRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserRegistrationRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.firstName = reader.readString();
                    break;
                case 2:
                    message.lastName = reader.readString();
                    break;
                case 3:
                    message.title = reader.readString();
                    break;
                case 4:
                    message.email = reader.readString();
                    break;
                case 5:
                    message.phone = reader.readString();
                    break;
                case 6:
                    message.role = reader.readEnum();
                    break;
                case 7:
                    message.profilePicture = reader.readString();
                    break;
                case 8:
                    message.password = reader.readString();
                    break;
                case 9:
                    message.dateOfBirth = reader.readString();
                    break;
                case 10:
                    message.address = reader.readString();
                    break;
                case 11:
                    message.nationality = reader.readString();
                    break;
                case 12:
                    message.username = reader.readString();
                    break;
                case 13:
                    message.gender = reader.readString();
                    break;
                case 14:
                    pb_1.Message.addToRepeatedField(message, 14, reader.readString());
                    break;
                case 15:
                    message.flaggedIp = reader.readString();
                    break;
                case 16:
                    reader.readMessage(message.createdAt, () => message.createdAt = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                    break;
                case 17:
                    reader.readMessage(message.updatedAt, () => message.updatedAt = dependency_1.google.protobuf.Timestamp.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UserRegistrationRequest {
        return UserRegistrationRequest.deserialize(bytes);
    }
}
export class UserRegistrationResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        data?: UserRegistrationRequest;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
        }
    }
    get data() {
        return pb_1.Message.getWrapperField(this, UserRegistrationRequest, 1) as UserRegistrationRequest;
    }
    set data(value: UserRegistrationRequest) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_data() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        data?: ReturnType<typeof UserRegistrationRequest.prototype.toObject>;
    }): UserRegistrationResponse {
        const message = new UserRegistrationResponse({});
        if (data.data != null) {
            message.data = UserRegistrationRequest.fromObject(data.data);
        }
        return message;
    }
    toObject() {
        const data: {
            data?: ReturnType<typeof UserRegistrationRequest.prototype.toObject>;
        } = {};
        if (this.data != null) {
            data.data = this.data.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_data)
            writer.writeMessage(1, this.data, () => this.data.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): UserRegistrationResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new UserRegistrationResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.data, () => message.data = UserRegistrationRequest.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): UserRegistrationResponse {
        return UserRegistrationResponse.deserialize(bytes);
    }
}
export class LoginRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        email?: string;
        phone?: string;
        password?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("email" in data && data.email != undefined) {
                this.email = data.email;
            }
            if ("phone" in data && data.phone != undefined) {
                this.phone = data.phone;
            }
            if ("password" in data && data.password != undefined) {
                this.password = data.password;
            }
        }
    }
    get email() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set email(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    get phone() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set phone(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    get password() {
        return pb_1.Message.getFieldWithDefault(this, 3, "") as string;
    }
    set password(value: string) {
        pb_1.Message.setField(this, 3, value);
    }
    static fromObject(data: {
        email?: string;
        phone?: string;
        password?: string;
    }): LoginRequest {
        const message = new LoginRequest({});
        if (data.email != null) {
            message.email = data.email;
        }
        if (data.phone != null) {
            message.phone = data.phone;
        }
        if (data.password != null) {
            message.password = data.password;
        }
        return message;
    }
    toObject() {
        const data: {
            email?: string;
            phone?: string;
            password?: string;
        } = {};
        if (this.email != null) {
            data.email = this.email;
        }
        if (this.phone != null) {
            data.phone = this.phone;
        }
        if (this.password != null) {
            data.password = this.password;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.email.length)
            writer.writeString(1, this.email);
        if (this.phone.length)
            writer.writeString(2, this.phone);
        if (this.password.length)
            writer.writeString(3, this.password);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.email = reader.readString();
                    break;
                case 2:
                    message.phone = reader.readString();
                    break;
                case 3:
                    message.password = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): LoginRequest {
        return LoginRequest.deserialize(bytes);
    }
}
export class LoginResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        data?: UserRegistrationRequest;
        AccessToken?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("data" in data && data.data != undefined) {
                this.data = data.data;
            }
            if ("AccessToken" in data && data.AccessToken != undefined) {
                this.AccessToken = data.AccessToken;
            }
        }
    }
    get data() {
        return pb_1.Message.getWrapperField(this, UserRegistrationRequest, 1) as UserRegistrationRequest;
    }
    set data(value: UserRegistrationRequest) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_data() {
        return pb_1.Message.getField(this, 1) != null;
    }
    get AccessToken() {
        return pb_1.Message.getFieldWithDefault(this, 2, "") as string;
    }
    set AccessToken(value: string) {
        pb_1.Message.setField(this, 2, value);
    }
    static fromObject(data: {
        data?: ReturnType<typeof UserRegistrationRequest.prototype.toObject>;
        AccessToken?: string;
    }): LoginResponse {
        const message = new LoginResponse({});
        if (data.data != null) {
            message.data = UserRegistrationRequest.fromObject(data.data);
        }
        if (data.AccessToken != null) {
            message.AccessToken = data.AccessToken;
        }
        return message;
    }
    toObject() {
        const data: {
            data?: ReturnType<typeof UserRegistrationRequest.prototype.toObject>;
            AccessToken?: string;
        } = {};
        if (this.data != null) {
            data.data = this.data.toObject();
        }
        if (this.AccessToken != null) {
            data.AccessToken = this.AccessToken;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_data)
            writer.writeMessage(1, this.data, () => this.data.serialize(writer));
        if (this.AccessToken.length)
            writer.writeString(2, this.AccessToken);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): LoginResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new LoginResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.data, () => message.data = UserRegistrationRequest.deserialize(reader));
                    break;
                case 2:
                    message.AccessToken = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): LoginResponse {
        return LoginResponse.deserialize(bytes);
    }
}
export class VerifyAuthRequest extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        token?: string;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("token" in data && data.token != undefined) {
                this.token = data.token;
            }
        }
    }
    get token() {
        return pb_1.Message.getFieldWithDefault(this, 1, "") as string;
    }
    set token(value: string) {
        pb_1.Message.setField(this, 1, value);
    }
    static fromObject(data: {
        token?: string;
    }): VerifyAuthRequest {
        const message = new VerifyAuthRequest({});
        if (data.token != null) {
            message.token = data.token;
        }
        return message;
    }
    toObject() {
        const data: {
            token?: string;
        } = {};
        if (this.token != null) {
            data.token = this.token;
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.token.length)
            writer.writeString(1, this.token);
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VerifyAuthRequest {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VerifyAuthRequest();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    message.token = reader.readString();
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): VerifyAuthRequest {
        return VerifyAuthRequest.deserialize(bytes);
    }
}
export class VerifyAuthResponse extends pb_1.Message {
    #one_of_decls: number[][] = [];
    constructor(data?: any[] | {
        user?: User;
    }) {
        super();
        pb_1.Message.initialize(this, Array.isArray(data) ? data : [], 0, -1, [], this.#one_of_decls);
        if (!Array.isArray(data) && typeof data == "object") {
            if ("user" in data && data.user != undefined) {
                this.user = data.user;
            }
        }
    }
    get user() {
        return pb_1.Message.getWrapperField(this, User, 1) as User;
    }
    set user(value: User) {
        pb_1.Message.setWrapperField(this, 1, value);
    }
    get has_user() {
        return pb_1.Message.getField(this, 1) != null;
    }
    static fromObject(data: {
        user?: ReturnType<typeof User.prototype.toObject>;
    }): VerifyAuthResponse {
        const message = new VerifyAuthResponse({});
        if (data.user != null) {
            message.user = User.fromObject(data.user);
        }
        return message;
    }
    toObject() {
        const data: {
            user?: ReturnType<typeof User.prototype.toObject>;
        } = {};
        if (this.user != null) {
            data.user = this.user.toObject();
        }
        return data;
    }
    serialize(): Uint8Array;
    serialize(w: pb_1.BinaryWriter): void;
    serialize(w?: pb_1.BinaryWriter): Uint8Array | void {
        const writer = w || new pb_1.BinaryWriter();
        if (this.has_user)
            writer.writeMessage(1, this.user, () => this.user.serialize(writer));
        if (!w)
            return writer.getResultBuffer();
    }
    static deserialize(bytes: Uint8Array | pb_1.BinaryReader): VerifyAuthResponse {
        const reader = bytes instanceof pb_1.BinaryReader ? bytes : new pb_1.BinaryReader(bytes), message = new VerifyAuthResponse();
        while (reader.nextField()) {
            if (reader.isEndGroup())
                break;
            switch (reader.getFieldNumber()) {
                case 1:
                    reader.readMessage(message.user, () => message.user = User.deserialize(reader));
                    break;
                default: reader.skipField();
            }
        }
        return message;
    }
    serializeBinary(): Uint8Array {
        return this.serialize();
    }
    static deserializeBinary(bytes: Uint8Array): VerifyAuthResponse {
        return VerifyAuthResponse.deserialize(bytes);
    }
}
interface GrpcUnaryServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
    (message: P, callback: grpc_1.requestCallback<R>): grpc_1.ClientUnaryCall;
}
interface GrpcStreamServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
    (message: P, options?: grpc_1.CallOptions): grpc_1.ClientReadableStream<R>;
}
interface GrpWritableServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (metadata: grpc_1.Metadata, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (options: grpc_1.CallOptions, callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
    (callback: grpc_1.requestCallback<R>): grpc_1.ClientWritableStream<P>;
}
interface GrpcChunkServiceInterface<P, R> {
    (metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
    (options?: grpc_1.CallOptions): grpc_1.ClientDuplexStream<P, R>;
}
interface GrpcPromiseServiceInterface<P, R> {
    (message: P, metadata: grpc_1.Metadata, options?: grpc_1.CallOptions): Promise<R>;
    (message: P, options?: grpc_1.CallOptions): Promise<R>;
}
export abstract class UnimplementedUserServiceService {
    static definition = {
        RegisterUser: {
            path: "/UserService/RegisterUser",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: UserRegistrationRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => UserRegistrationRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: UserRegistrationResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => UserRegistrationResponse.deserialize(new Uint8Array(bytes))
        },
        Login: {
            path: "/UserService/Login",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: LoginRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => LoginRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: LoginResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => LoginResponse.deserialize(new Uint8Array(bytes))
        },
        VerifyAuth: {
            path: "/UserService/VerifyAuth",
            requestStream: false,
            responseStream: false,
            requestSerialize: (message: VerifyAuthRequest) => Buffer.from(message.serialize()),
            requestDeserialize: (bytes: Buffer) => VerifyAuthRequest.deserialize(new Uint8Array(bytes)),
            responseSerialize: (message: VerifyAuthResponse) => Buffer.from(message.serialize()),
            responseDeserialize: (bytes: Buffer) => VerifyAuthResponse.deserialize(new Uint8Array(bytes))
        }
    };
    [method: string]: grpc_1.UntypedHandleCall;
    abstract RegisterUser(call: grpc_1.ServerUnaryCall<UserRegistrationRequest, UserRegistrationResponse>, callback: grpc_1.sendUnaryData<UserRegistrationResponse>): void;
    abstract Login(call: grpc_1.ServerUnaryCall<LoginRequest, LoginResponse>, callback: grpc_1.sendUnaryData<LoginResponse>): void;
    abstract VerifyAuth(call: grpc_1.ServerUnaryCall<VerifyAuthRequest, VerifyAuthResponse>, callback: grpc_1.sendUnaryData<VerifyAuthResponse>): void;
}
export class UserServiceClient extends grpc_1.makeGenericClientConstructor(UnimplementedUserServiceService.definition, "UserService", {}) {
    constructor(address: string, credentials: grpc_1.ChannelCredentials, options?: Partial<grpc_1.ChannelOptions>) {
        super(address, credentials, options);
    }
    RegisterUser: GrpcUnaryServiceInterface<UserRegistrationRequest, UserRegistrationResponse> = (message: UserRegistrationRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<UserRegistrationResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<UserRegistrationResponse>, callback?: grpc_1.requestCallback<UserRegistrationResponse>): grpc_1.ClientUnaryCall => {
        return super.RegisterUser(message, metadata, options, callback);
    };
    Login: GrpcUnaryServiceInterface<LoginRequest, LoginResponse> = (message: LoginRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<LoginResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<LoginResponse>, callback?: grpc_1.requestCallback<LoginResponse>): grpc_1.ClientUnaryCall => {
        return super.Login(message, metadata, options, callback);
    };
    VerifyAuth: GrpcUnaryServiceInterface<VerifyAuthRequest, VerifyAuthResponse> = (message: VerifyAuthRequest, metadata: grpc_1.Metadata | grpc_1.CallOptions | grpc_1.requestCallback<VerifyAuthResponse>, options?: grpc_1.CallOptions | grpc_1.requestCallback<VerifyAuthResponse>, callback?: grpc_1.requestCallback<VerifyAuthResponse>): grpc_1.ClientUnaryCall => {
        return super.VerifyAuth(message, metadata, options, callback);
    };
}
